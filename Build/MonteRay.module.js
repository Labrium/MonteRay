/* MonteRay v1.0 alpha Copyright (c) 2021 Tech Labs, Inc. https://techlabsinc.github.io/MonteRay/LICENSE */
 var k=k||{};k.PathtracingRenderer=function(o){this.VERSION="1.0 alpha",this.EPSILON=1e-5,o=o||{},console.log("Rendering provided by MonteRay v"+this.VERSION+" https://techlabsinc.github.io/MonteRay/LICENSE");var f;o.canvas?f=o.canvas:f=document.createElement("canvas");var P=f.getContext("2d",{alpha:o.alpha===!0}),T,B,W,_,M,X=new THREE.Color(0);this.domElement=f,this.autoClear=!0,this.setClearColor=function(n){X.set(n)},this.setPixelRatio=function(n){M=n,this.setSize(T*M,B*M)},this.setSize=function(n,m){T=Math.round(n/M),B=Math.round(m/M),W=T/2,_=B/2,f.style.width=n+"px",f.style.height=m+"px"},this.setSize(f.width,f.height),this.setPixelRatio(1),this.clear=function(){},(!o.BVHAcceleration||o.BVHAcceleration&&o.BVHAcceleration!=!1)&&(THREE.BufferGeometry.prototype.computeBoundsTree=MeshBVHLib.computeBoundsTree,THREE.BufferGeometry.prototype.disposeBoundsTree=MeshBVHLib.disposeBoundsTree,THREE.Mesh.prototype.raycast=MeshBVHLib.acceleratedRaycast);function ie(n,m){return Math.floor(Math.random()*(m-n+1))+n}var U=1;this.download=function(){var n=document.createElement("a");n.setAttribute("href",f.toDataURL()),n.setAttribute("download",document.title+"_"+U+".png"),U++,n.style.display="none",document.body.appendChild(n),n.onclick=function(m){m.stopPropagation()},n.click(),document.body.removeChild(n),o.nextFrame()};var g=1;this.render=function(n,m){var E=T,S=B,oe=W,ne=_;f.width=E,f.height=S;var I=1,le=Math.PI*2,H=new THREE.Color(0),t=new THREE.Raycaster;t.firstHitOnly=!0;for(var A=[],F=new THREE.Vector2(1/E,1/S),O=0;O<S;O++)for(var N=0;N<E;N++)A.push(new THREE.Vector2(N/E*2-1,-(O/S)*2+1));n.updateMatrixWorld(),m.updateMatrixWorld();try{document.getElementById("sa").innerHTML="Analyzing scene..."}catch(e){}var C=[];n.traverseVisible(function(e){try{(!o.BVHAcceleration||o.BVHAcceleration&&o.BVHAcceleration!=!1)&&e instanceof THREE.Mesh&&e.geometry.computeBoundsTree(),H.equals(e.material.emissive)||C.push([e,new MeshSurfaceSampler(e).build()])}catch(i){}});var z=C.length;try{document.getElementById("sa").innerHTML="Pre-rendering..."}catch(e){}for(var j=[],u=[],Y=A.length,w=0;w<Y;w++){var v=new THREE.Color(0),D=A[w];t.setFromCamera(D,m);var y=t.intersectObjects(n.children,!0)[0],Z=1;if(y==null)v.add(n.background);else try{if(H.equals(y.object.material.emissive))y.object.material.isMeshBasicMaterial?v.copy(y.object.material.colors):(v.setScalar(y.distance/m.far),j.push([D,y,2,new THREE.Color(0),w*4]));else{var G=1;y.object.material.emissiveIntensity&&(G=y.object.material.emissiveIntensity),v.copy(y.object.material.color),v.multiply(y.object.material.emissive.clone().multiplyScalar(G))}}catch(e){v.setScalar(y.distance/m.far),j.push([D,y,2,new THREE.Color(0),w*4])}u.push(v.r*255),u.push(v.g*255),u.push(v.b*255),u.push(Z*255)}var $=new ImageData(new Uint8ClampedArray(u),E,S);P.putImageData($,0,0),j.sort(function(e,i){return e[1].distance-i[1].distance});function x(e){return e.face.normal.clone().applyMatrix3(new THREE.Matrix3().getNormalMatrix(e.object.matrixWorld)).normalize()}var h=!1;function s(e,i){var r;if(r=t.intersectObjects(n.children,!0)[0],r==null)return n.background;if(i>4&&(i>20||Math.random()>Math.max(r.object.material.color.r,Math.max(r.object.material.color.g,r.object.material.color.b))))return H;var l=x(r),c=H.clone();if(H.equals(r.object.material.emissive)){if(r.object.material.mirror||r.object.material.metalness==1)return t.ray.origin.copy(r.point),t.ray.direction.reflect(l),s([e[0],r,e[2],e[3],e[4]],i+1);if(r.object.material.glass)return h==!1?(t.ray.origin.copy(r.point.addScaledVector(l,-EPSILON)),t.ray.direction.lerp(l.clone().negate(),r.object.material.refractionRatio),h=!0,s([e[0],r,e[2],e[3],e[4]],i+1)):(t.ray.origin.copy(r.point.addScaledVector(l,EPSILON)),t.ray.direction.lerp(l,r.object.material.refractionRatio),h=!1,s([e[0],r,e[2],e[3],e[4]],i));var p=0,J=1;for(o.lightSamples&&(J=Math.floor(Math.random()*o.lightSamples));p<J;){var L=new THREE.Vector3,K=C[Math.floor(Math.random()*z)];if(K[1].sample(L),L.copy(K[0].localToWorld(L)),t.set(r.point.addScaledVector(l,1e-12),new THREE.Vector3().normalize()),t.ray.lookAt(L),o.advancedLighting)if(Math.random()>.5){var a=s([e[0],r,e[2],e[3],e[4]],i+1),b=l.dot(t.ray.direction);c.add(r.object.material.color.clone().multiply(a.clone().multiplyScalar(b)))}else{var a=t.intersectObjects(n.children,!0)[0],b=l.dot(t.ray.direction);if(o.recursiveLighting){if(a!=null){var d=1;a.object.material.emissiveIntensity&&(d=a.object.material.emissiveIntensity),c.add(a.object.material.color.clone().multiply(a.object.material.emissive.clone().multiplyScalar(d)))}else a.object.material.mirror||a.object.material.metalness==1?(t.ray.origin.copy(a.point),t.ray.direction.reflect(l),c.add(s([e[0],a,e[2],e[3],e[4]],i+1))):a.object.material.glass?h==!1?(t.ray.origin.copy(a.point.addScaledVector(l,-EPSILON)),t.ray.direction.lerp(l.clone().negate(),a.object.material.refractionRatio),h=!0,c.add(s([e[0],a,e[2],e[3],e[4]],i+1))):(t.ray.origin.copy(a.point.addScaledVector(l,EPSILON)),t.ray.direction.lerp(l,a.object.material.refractionRatio),h=!1,c.add(s([e[0],a,e[2],e[3],e[4]],i))):c.add(n.background);c.multiply(r.object.material.color)}else if(a!=null){var b=l.dot(t.ray.direction),d=1;a.object.material.emissiveIntensity&&(d=a.object.material.emissiveIntensity),c.add(r.object.material.color.clone().multiply(a.object.material.color.clone().multiply(a.object.material.emissive.clone().multiplyScalar(b).multiplyScalar(z).multiplyScalar(d))))}}else{var a=t.intersectObjects(n.children,!0)[0],b=l.dot(t.ray.direction);if(o.recursiveLighting){if(a!=null){var d=1;a.object.material.emissiveIntensity&&(d=a.object.material.emissiveIntensity),c.add(a.object.material.color.clone().multiply(a.object.material.emissive.clone().multiplyScalar(d)))}else a.object.material.mirror||a.object.material.metalness==1?(t.ray.origin.copy(a.point),t.ray.direction.reflect(l),c.add(s([e[0],a,e[2],e[3],e[4]],i+1))):a.object.material.glass?h==!1?(t.ray.origin.copy(a.point.addScaledVector(l,-EPSILON)),t.ray.direction.lerp(l.clone().negate(),a.object.material.refractionRatio),h=!0,c.add(s([e[0],a,e[2],e[3],e[4]],i+1))):(t.ray.origin.copy(a.point.addScaledVector(l,EPSILON)),t.ray.direction.lerp(l,a.object.material.refractionRatio),h=!1,c.add(s([e[0],a,e[2],e[3],e[4]],i))):c.add(n.background);c.multiply(r.object.material.color).multiplyScalar(l.dot(t.ray.direction))}else if(a!=null){var b=l.dot(t.ray.direction),d=1;a.object.material.emissiveIntensity&&(d=a.object.material.emissiveIntensity),c.add(r.object.material.color.clone().multiply(a.object.material.color.clone().multiply(a.object.material.emissive.clone().multiplyScalar(b).multiplyScalar(z).multiplyScalar(d))))}}p++}o.lightSamples&&c.multiplyScalar(1/(p+1)),Q.lookAt(l);var ae=new THREE.Vector3(Math.random()-.5,Math.random()-.5,Math.random()*.5).applyQuaternion(Q.quaternion);t.set(r.point,ae);var ce=1/(2*Math.PI),b=l.dot(t.ray.direction),de=1/Math.PI,re=s([e[0],r,e[2],e[3],e[4]],i+1);return c.multiplyScalar(1).add(r.object.material.color.clone().multiply(re).multiplyScalar(b*2))}else{var d=1;return r.object.material.emissiveIntensity&&(d=r.object.material.emissiveIntensity),r.object.material.color.clone().multiply(r.object.material.emissive.clone().multiplyScalar(d))}}var Q=new THREE.Object3D,R=0;o.fps||(g=j.length,o.pixelBatchSize&&(g=o.pixelBatchSize));var V=0,ee=this;function q(){try{for(var e=0;e<g;e++){var i=j[R],r=j[R][2]-1;if(r<1&&(r=1),t.setFromCamera(new THREE.Vector2(i[0].x+(Math.random()-.5)*F.x,i[0].y+(Math.random()-.5)*F.y),m),i[3].multiplyScalar(r-1),i[3].add(s(i,0)),i[3].multiplyScalar(1/r),j[R][2]++,R++,u[i[4]]=i[3].r*255,u[i[4]+1]=i[3].g*255,u[i[4]+2]=i[3].b*255,u[i[4]+3]=255,R>=j.length){if(R=0,(o.maxSamples||o.downloadInterval)&&(I>=o.maxSamples||I%o.downloadInterval==0)){var l=new ImageData(new Uint8ClampedArray(u),E,S);if(P.putImageData(l,0,0),ee.download(),I>=o.maxSamples){try{document.getElementById("sa").innerHTML="Render Complete"}catch(p){}return}}I++}}var l=new ImageData(new Uint8ClampedArray(u),E,S);if(P.putImageData(l,0,0),o.fps){var c=performance.now();c-V>1e3/o.fps?g-=10:c-V<1e3/o.fps&&(g+=100),g<1&&(g=1);try{document.getElementById("sa").innerHTML=E+"x"+S+"<br />"+I+"spp "+g+"ppf "+Math.round(1/((c-V)/1e3))+"fps"}catch(d){}V=performance.now()}}catch(d){console.log(d)}setTimeout(q,0)}setTimeout(q,0)}};var te=k.PathtracingRenderer;export{te as PathtracingRenderer};
